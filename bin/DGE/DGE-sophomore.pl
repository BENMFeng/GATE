#!/usr/bin/perl -w
use strict;
use warnings;
use Getopt::Long;

my $program_name = $1 if ( $0 =~ /([^\/]+)$/);
my $usage = <<USAGE;
$program_name -- TagSeq Digested Location Checking script 

Author: BENM <binxiaofeng\@gmail.com>
Version: 0.3 alpha
Date: 2010-06-15
Date: 2010-06-16 0.2 alpha
Update: 2010-07-07 0.3 alpha

$program_name		[options]	[functions]
		-cac <str>	Input cac file, it is generated by cac.pl(v3.2)
		-ref <str>	Input reference sequence
		-aln <str>	Input alignment file
		-f <str>	alignment format SOAP/MAQ/BWA/BOWTIE: [SOAP]
		-len <int>	tags length: [17]
		-cov_len <int>	set coverred length limited low_th-high_th: [no limited]
		-tag_id <str>	set statistical tag id, default: all
		-o <str>	Output result
		-plot 		plot stat figure, log unit
		-error		output error reference sequence and tags, it will output:error.ref.seq and error.aln.seq
		-help		help & usuage

Example:
perl $program_name -cac aln.soap.uniq.sort.cac -ref database.fa -aln aln.soap.uniq.sort -o TagSeqDigestionDistribution.txt -error -plot

USAGE
my ($Cac,$Ref,$Aln,$Format,$Len,$Cov_len,$Tag_id,$Out,$Plot,$Error,$Help);
my %opts;
GetOptions ( \%opts, "cac:s"=>\$Cac, "ref:s"=>\$Ref, "aln:s"=>\$Aln, "f:s"=>\$Format, "len:i"=>\$Len, "cov_len:s"=>\$Cov_len, "tag_id:s"=>\$Tag_id, "o:s"=>\$Out, "Plot"=>\$Plot, "error"=>\$Error, "help"=>\$Help );
die $usage if ((!defined $Cac)||(!defined $Ref)||(!defined $Aln)||(defined $Help));
$Len ||= 17;
$Format ||= "SOAP";
$Tag_id ||= "all";
my $Site = ($Len==17) ? "CATG" : "GATC";

my ($cov_min,$cov_max);
($cov_min,$cov_max) = split /\-/,$Cov_len if (defined $Cov_len);
$cov_min ||= 0;

my %AlnSite;

open (CAC,$Cac) || die "Can't open cac file $Cac for reading\n";
while(<CAC>)
{
	next if ($_ eq "");
	my @t=split /\t+/;
	next if ((@t<3)||($t[1]!~/^\d+$/));
	if (defined $Cov_len)
	{
		next if (($t[1]<$cov_min)||((defined $cov_max)&&($t[1]>$cov_max)));
		next if ($t[3]-$t[2]>$cov_min+$cov_max);
	}
	if (($t[2]=~/\d+/)&&($t[3]=~/\d+/))
	{
		@{$AlnSite{$t[0]}}=($t[2],$t[3]);
	}
}
close CAC;

my ($chr,$seq);
my %TCheck;
my %Sequence;
my @Stat;
open (ER1,">$Tag_id.error.ref.seq") if (defined $Error);
open (REF,$Ref) || die "Can't open reference sequence file $Ref for reading\n";
while(<REF>)
{
	if (/\>(\S+)/)
	{
		#print "$1\n";
		if ((defined $seq)&&($seq ne "")&&(length($seq)>0)&&(exists $AlnSite{$chr}))
		{
			my $S = (${$AlnSite{$chr}}[0]-5>0) ? (${$AlnSite{$chr}}[0]-5) : 0;
			my $E = (${$AlnSite{$chr}}[1]+3<length($seq)) ? (${$AlnSite{$chr}}[1]+3) : length($seq)-1;
			my $subseq=uc(substr($seq,$S,$E-$S+1));
			my @duan;
			my $n=0;
			
			if ($subseq=~/$Site/)
			{
				@duan=(split /$Site/,$subseq);
			}
			else
			{
				my $subseq_rc = reverse($subseq);
				$subseq_rc =~ tr/ACGT/TGCA/;
				if ($subseq_rc=~/$Site/)
				{
					@duan=(split /$Site/,$subseq_rc);
				}
				else
				{
					print ER1 ">$chr:${$AlnSite{$chr}}[0]-${$AlnSite{$chr}}[1]\tExpanded:$S-$E\tno digested site: $Site\n$subseq\n" if ((defined $Error)&&(@duan==0));
					for (my $m=0;$m<=length($subseq)-$Len;$m++)
					{
						my $pian=substr($subseq,$m,$Len);
						next if (length($pian)<$Len);
						$TCheck{$pian}=$n;
						$pian=reverse($pian);
						$pian=~tr/ACGT/TGCA/;
						$TCheck{$pian}=$n;
					}
				}
			}
			if (@duan>0)
			{
				for (my $i=0;$i<@duan;$i++)
				{
					#print "$duan[$i]\n";
					my $dd=$duan[$i];
					if (length($dd)>=$Len)
					{
						$n++;
						for (my $j=0;$j<=length($dd)-$Len;$j++)
						{
							my $pian=substr($dd,$j,$Len);
							next if (length($pian)<$Len);
							$TCheck{$pian}=$n;
							$pian=reverse($pian);
							$pian=~tr/ACGT/TGCA/;
							$TCheck{$pian}=$n;
						}
					}
				}
				if ($n>=2)
				{
					my $errseq = $subseq;
					$errseq =~ s/$Site/ $Site /g;
					print ER1 ">$chr:${$AlnSite{$chr}}[0]-${$AlnSite{$chr}}[1]\tExpanded:$S-$E\tmulti-digested sites: $n\n$errseq\n" if (defined $Error);
				}
			}
		}
		$Sequence{$chr}=$seq if ((defined $Error)&&(defined $chr)&&(defined $seq));
		$chr=$1;
		$seq="";
	}
	else
	{
		s/\s*//g;
		$seq.=$_;
	}
}
close REF;
close ER1 if (defined $Error);

#Alignment	MAQ	SOAP2	BWA	BOWTIE
#sequencename	0	0	0	0
#chromosome	1	7	2	2
#position	2	8	3	3
#sequence	14	1	9	4
my ($A,$B,$C);
if ($Format =~ /MAQ/i)
{
	($A,$B,$C)=(1,2,14);
}
elsif ($Format =~ /SOAP/i)
{
	($A,$B,$C)=(7,8,1);
}
elsif ($Format =~ /BWA/i)
{
	($A,$B,$C)=(2,3,9);
}
elsif ($Format =~ /BOWTIE/i)
{
	($A,$B,$C)=(2,3,4);
}

my ($Chr,$Pre,$Pos,$PrintSeq);
my $err_num=0;
my @err_tag=();
my @err_tot=();
my $e;
open (ER2,">$Tag_id.error.aln.seq") if (defined $Error);
open (ALN,$Aln) || die "Can't open SOAP aln file $Aln for reading\n";
while(<ALN>)
{
	my @t=split /\t+/,$_;
	#($Chr,$Pos)=($t[7],$t[8]);
	my ($tag_id,$copynumber)=("",0);
	if ($t[0]=~/^([^:]*)\:(\d+)/)
	{
		($tag_id,$copynumber)=($1,$2);
		next if (($Tag_id ne "all")&&($tag_id ne $Tag_id));
	}
	if (defined $Error)
	{
		if ((defined $Chr)&&($Chr ne $t[$A]))
		{
			$Pos=$t[$B];
			if ((defined $PrintSeq)&&(length($PrintSeq)>$Len)&&($PrintSeq=~/[AGCT]\s+[AGCT]/))
			{
				$err_num++;
				my $ref_seq=substr($Sequence{$Chr},($Pre-1),length($PrintSeq));
				print ER2 "$err_num ref: $ref_seq\n";
				print ER2 "$err_num aln: $PrintSeq\n";
				print ER2 "$err_num tag:";
				for (my $r=0;$r<@err_tag;$r++)
				{
					print ER2 "\t$err_tag[$r][0]:$err_tag[$r][1]";
					$err_tot[$r][0]+=$err_tag[$r][0];
					$err_tot[$r][1]+=$err_tag[$r][1];
				}
				print ER2 "\n\n";
			}
			$e=0;
			@err_tag=();
			$Pre=$Pos;
			$PrintSeq=$t[$C];
			$err_tag[$e][0]++;
			$err_tag[$e][1]+=(split /\:/,$t[0])[1];
		}
		elsif (defined $Pos)
		{
			if (($t[$B]-$Pos>$Len)&&($t[$B]-$Pos<=$Len+5))
			{
				$PrintSeq.=(" "x($t[$B]-$Pos-$Len));
				$PrintSeq.=$t[$C];
				$e++;
				$err_tag[$e][0]++;
				$err_tag[$e][1]+=$copynumber;
			}
			elsif (($t[$B]-$Pos>0)&&($t[$B]-$Pos<=$Len))
			{
				$PrintSeq.=substr( $t[$C],($Len-$t[$B]+$Pos),(length($t[$C])-($Len-$t[$B]+$Pos)) );
				$err_tag[$e][0]++;
				$err_tag[$e][1]+=$copynumber;
			}
			else
			{
				
				if ((defined $PrintSeq)&&(length($PrintSeq)>$Len)&&($PrintSeq=~/[AGCT]\s+[AGCT]/))
				{
					$err_num++;
					my $ref_seq=substr($Sequence{$Chr},($Pre-1),length($PrintSeq));
					my $checkSite=substr($Sequence{$Chr},$Pos+$Len-1,$t[$B]-$Pos+$Len);
					$PrintSeq.=" *" if ($checkSite=~/$Site/);
					print ER2 "$err_num ref: $ref_seq\n";
					print ER2 "$err_num aln: $PrintSeq\n";
					print ER2 "$err_num tag:";
					for (my $r=0;$r<@err_tag;$r++)
					{
						print ER2 "\t$err_tag[$r][0]:$err_tag[$r][1]";
						$err_tot[$r][0]+=$err_tag[$r][0];
						$err_tot[$r][1]+=$err_tag[$r][1];
					}
					print ER2 "\n\n";
				}
				$e=0;
				@err_tag=();
				$Pre=$t[$B];
				$PrintSeq=$t[$C];
				$err_tag[$e][0]++;
				$err_tag[$e][1]+=$copynumber;
			}
		}
		$Chr=$t[$A];
		$Pos=$t[$B];
	}
	
	my $tag=uc($t[$C]);
	if (exists $TCheck{$tag})
	{
		$Stat[$TCheck{$tag}][0]++;
		$Stat[$TCheck{$tag}][1]+=$copynumber;
	}
}
close ALN;

if (defined $Error)
{
	if ((defined $PrintSeq)&&(length($PrintSeq)>$Len)&&($PrintSeq=~/[AGCT]\s+[AGCT]/))
	{
		$err_num++;
		my $ref_seq=substr($Sequence{$Chr},($Pre-1),length($PrintSeq));
		print ER2 "$err_num ref: $ref_seq\n";
		print ER2 "$err_num aln: $PrintSeq\n";
		print ER2 "$err_num tag:";
		for (my $r=0;$r<@err_tag;$r++)
		{
			print ER2 "\t$err_tag[$r][0]:$err_tag[$r][1]";
			$err_tot[$r][0]+=$err_tag[$r][0];
			$err_tot[$r][1]+=$err_tag[$r][1];
		}
		print ER2 "\n\n";
	}
	print ER2 "## Total number: $err_num\n";
	for (my $r=0;$r<@err_tot;$r++)
	{
		print ER2 "## Block-$r Tags: $err_tot[$r][0]\tCopyNumber: $err_tot[$r][1]\n";
	}
	close ER2;
}

open (OUT,">$Out") || die "Can't open output file $Out for writing\n";
open (LOG,">$Out.log") if (defined $Plot);
for (my $k=0;$k<@Stat;$k++)
{
	next if (!defined $Stat[$k]);
	print OUT "$k\t$Stat[$k][0]\t$Stat[$k][1]\n";
	print LOG ("$k\t",log($Stat[$k][0]),"\t",log($Stat[$k][1]),"\n") if (defined $Plot);
}
close OUT;
close LOG if (defined $Plot);

if (defined $Plot)
{
	gnuplot(1,2,"$Out.log");
	gnuplot(1,3,"$Out.log");
}

sub gnuplot
{
	my ($x,$y,$file)=@_;
	my $fh="$Tag_id.gnuplot.dat";
open(PL, ">$fh") || die $!;
print PL qq(
reset;
set title 'TagSeq Degestion Sites Distribution';
set xlabel 'Tags hit Sites';
set ylabel 'Number (log)';
set nokey;
set terminal svg;
set output "$file.$x-$y.svg";
plot "$file" u $x:$y w lp;
);
close (PL);
system "gnuplot $fh";
}
